import nltk
from nltk.corpus import stopwords
from nltk.tokenize import sent_tokenize, word_tokenize
from nltk.probability import FreqDist
from nltk.tokenize.treebank import TreebankWordDetokenizer

nltk.download("punkt")
nltk.download("stopwords")

def extractive_summarization(document, num_sentences=3):
    # Step 1: Sentence Tokenization
    sentences = sent_tokenize(document)

    # Step 2: Text Preprocessing
    stop_words = set(stopwords.words("english"))
    word_frequencies = FreqDist()

    for sentence in sentences:
        words = word_tokenize(sentence)
        words = [word.lower() for word in words if word.isalnum() and word.lower() not in stop_words]
        word_frequencies.update(words)

    # Step 3: Calculate Sentence Score
    sentence_scores = {}
    for sentence in sentences:
        for word, freq in word_frequencies.items():
            if word.lower() in sentence.lower():
                if sentence not in sentence_scores:
                    sentence_scores[sentence] = freq
                else:
                    sentence_scores[sentence] += freq

    # Step 4: Select Top Sentences
    sorted_sentences = sorted(sentence_scores.items(), key=lambda x: x[1], reverse=True)
    top_sentences = sorted_sentences[:num_sentences]

    summary = TreebankWordDetokenizer().detokenize([sentence[0] for sentence in top_sentences])

    return summary

document = """
Natural language processing (NLP) is a subfield of artificial intelligence(AI) that focuses on the interaction between computers and humans through natural language. NLP technologies are used to process, analyze, and understand large amounts of natural language data. One of the primary applications of NLP is sentiment analysis, which determines the sentiment or emotional tone of a piece of text. Sentiment analysis is widely used in social media monitoring, customer feedback analysis, and brand reputation management. 
Text summarization is another important NLP task. Extractive summarization involves selecting a subset of sentences from a text to create a shorter version that retains the most critical information. Abstractive summarization, on the other hand, generates a summary by paraphrasing and rephrasing the original text. The extraction summarization method typically involves the following steps:
1. Sentence Tokenization: Divide the text into individual sentences.
2. Text Preprocessing: Remove stopwords and punctuation, and convert words to lowercase. 
3. Calculate Sentence score: Assign scores to sentences based on their importance.
4. Select top sentences: choose sentences with the highest scores to form the summary
"""
summary = extractive_summarization(document)

print("Extractive Summary:")
print(summary)
